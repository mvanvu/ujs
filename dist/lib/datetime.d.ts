export type DateTimeLike = number | string | Date | DateTime;
export type DateTimeUnit = 'year' | 'month' | 'week' | 'date' | 'hour' | 'minute' | 'second' | 'millisecond';
export declare class DateTimeError extends Error {
}
export declare class DateTime {
    private isValid;
    private offset;
    private date;
    constructor(datetimeLike?: DateTimeLike, offset?: number | string);
    get valid(): boolean;
    get iso(): string;
    get native(): Date;
    get tzOffset(): string;
    static parseOffset(offset: number | string): number;
    static from(datetimeLike?: DateTimeLike, offset?: number | string): DateTime;
    static now(offset?: number | string): DateTime;
    static utc(): DateTime;
    static yesterday(offset?: number | string): DateTime;
    static tomorrow(offset?: number | string): DateTime;
    static parse(datetimeLike?: DateTimeLike): Date | false;
    static daysInMonth(month: number, year?: number): number;
    static pad(value: number, number?: number): string;
    daysInMonth(): number;
    setOffset(offset: string | number): DateTime;
    utc(): DateTime;
    clone(): DateTime;
    add(interval: number, unit?: DateTimeUnit): DateTime;
    addYear(year: number): DateTime;
    addMonth(month: number): DateTime;
    addWeek(week: number): DateTime;
    addDate(date: number): DateTime;
    addHour(hour: number): DateTime;
    addMinute(minute: number): DateTime;
    addSecond(second: number): DateTime;
    addMillisecond(millisecond: number): DateTime;
    nextDate(): DateTime;
    prevDate(): DateTime;
    nextWeek(): DateTime;
    prevWeek(): DateTime;
    nextMonth(): DateTime;
    prevMonth(): DateTime;
    nextYear(): DateTime;
    prevYear(): DateTime;
    startOf(): DateTime;
    endOf(): DateTime;
    format(pattern?: string, locale?: string): string;
    diff(datetime?: DateTimeLike, unit?: DateTimeUnit): number;
    gt(datetime?: DateTimeLike, unit?: DateTimeUnit): boolean;
    gte(datetime?: DateTimeLike, unit?: DateTimeUnit): boolean;
    lt(datetime?: DateTimeLike, unit?: DateTimeUnit): boolean;
    lte(datetime?: DateTimeLike, unit?: DateTimeUnit): boolean;
    eq(datetime?: DateTimeLike, unit?: DateTimeUnit): boolean;
    toString(): string;
    valueOf(): number;
    [Symbol.iterator](): Generator<number, void, unknown>;
}
